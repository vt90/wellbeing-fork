# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  pull_request:
  push:
    branches:
      - master

name: Deploy to Amazon DEV

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - name: Checking out source code
      id: check-out
      uses: actions/checkout@v2

    - name: Using Node ${{ matrix.node-version }}
      id: use-node
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Installing dependencies
      id: dependency-install
      run: npm install

    - name: Building source
      id: build
      env:
        FIREBASE_API_KEY: AIzaSyBtLyDgODrQMSgl-Cf8zwTePbqqH4WLJWo
        FIREBASE_APP_ID: 1:99324770316:web:46597a07ae073a4de39629
        FIREBASE_AUTH_DOMAIN: wellbeing-3d322.firebaseapp.com
        FIREBASE_DATABASE_URL: https://wellbeing-3d322-default-rtdb.europe-west1.firebasedatabase.app
        FIREBASE_MESSAGING_SENDER_ID: 99324770316
        FIREBASE_PROJECT_ID: wellbeing-3d322
        FIREBASE_REGION: europe-west1
        FIREBASE_STORAGE_BUCKET: wellbeing-3d322.appspot.com
      run: npm run build

    - name: Deploy to AWS
      id: deploy
      run: |
        scp -o StrictHostKeyChecking=no -i wellbeing0.pem -r www/* ubuntu@ec2-13-235-90-205.ap-south-1.compute.amazonaws.com:~/wellbeing-dev-www/
